

model{

####  Priors ########
loglam~dunif(-5,5)          ##  mean abundance prior
trend~dunif(-10,10)         ##  trend prior
beta.elev~dunif(-5,5)
beta.canopy~dunif(-5,5)
beta.treeheight~dunif(-5,5)
bwind~dunif(-5,5)
btime~dunif(-5,5)
bridge~dunif(-5,5)
bact~dunif(-5,5)

## SITE RANDOM EFFECT ##
for(i in 1:nsite){
  lam.site[i]~dnorm(loglam,tau.site)    ## site-specific random effect with hierarchical centering from Kery email 5 June 2018
}
tau.site<-1/(sigma.site*sigma.site)
sigma.site~dunif(0,10)

## YEAR RANDOM EFFECT FOR ABUNDANCE AND ANNUALLY VARYING DETECTION PROBABILITY ##
for(year in 1:nyear){
  p0[year]~dunif(0,1)## detection probability
  logitp0[year]<-log(p0[year]/(1-p0[year]))
  lam.year[year]~dnorm(trend*primocc[year],tau.year)    ## year-specific random effect with hierarchical centering from Kery email 5 June 2018
  }
tau.lp<-1/(sigma.p*sigma.p)
sigma.p~dunif(0,10)
tau.year<-1/(sigma.year*sigma.year)
sigma.year~dunif(0,10)


######### State and observation models ##############
for(year in 1:nyear){
  for(i in 1:nsite){
    log(lambda[i,year])<- lam.year[year]+beta.elev*elev[i,year]+beta.treeheight*treeheight[i,year]+beta.canopy*canopy[i,year]+lam.site[i]
    N[i,year]~dpois(lambda[i,year])

      for(t in 1:nrep){
        M[i,t,year]~dbin(p[i,t,year],N[i,year])
        p[i,t,year] <- exp(lp[i,t,year])/(1+exp(lp[i,t,year]))
        lp[i,t,year] ~ dnorm(mu.lp[i,t,year], tau.lp)
        mu.lp[i,t,year]<-logitp0[year] + btime*time[i,t,year]+ bridge*ridge[i,t,year]+ bwind*wind[i,t,year]+ bact*ACT[i,t,year]

        }
    }

### DERIVED PARAMETER FOR EACH YEAR ###
totalN[year]<-sum(N[,year])
anndet[year]<-mean(p[,,year])
}

# Computation of fit statistic (Bayesian p-value)
# Fit statistic for observed data
# Also, generate replicate data and compute fit stats for them
for(year in 1:nyear){
  for(i in 1:nsite){
    for(t in 1:nrep){

      # Actual data
      eval[i,t,year] <-N[i,year]*p[i,t,year] # Expected value
      sd.resi[i,t,year]<-sqrt(eval[i,t,year]*(1-p[i,t,year])) +0.5
      E[i,t,year]<-(M[i,t,year]-eval[i,t,year])/ sd.resi[i,t,year]
      E2[i,t,year] <- pow(E[i,t,year],2)

      # Replicate data sets
      M.new[i,t,year]~dbin(p[i,t,year],N[i,year])
      E.new[i,t,year]<-(M.new[i,t,year]-eval[i,t,year])/sd.resi[i,t,year]
      E2.new[i,t,year] <- pow(E.new[i,t,year], 2)
      }
    }
  }
fit <- sum(E2[,,])# Sum up squared residuals for actual data set
fit.new <- sum(E2.new[,,]) # Sum up for replicate data sets
}

