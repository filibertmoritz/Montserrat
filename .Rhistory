primocc=seq(2011:YEAR),
nyear=nyears,
elev=siteCov$elev,
treeheight=siteCov$tree,
canopy=siteCov$canopy,
rain=rain,
wind=wind,
day=day,
ridge=siteCov$ridge,
time=time,
ACT=ACT)
inits.trend <- list(#N = Nst,
trend=runif(1,-2,2),
loglam = runif(1,-2,2),
sigma.site = runif(1,0,2),
sigma.year=runif(1,0,2),
sigma.p=runif(1,0,2),
beta.canopy=runif(1,-2,2),
#beta.rain=runif(1,-2,2),
beta.treeheight=runif(1,-2,2),
beta.elev=runif(1,-2,2),
bwind=-1,
brain=-1,
bridge=-1,
btime=-1,
b2time=-1,
bday=1,
bact=2,
p0 = runif(nyears,0.1,0.9))
inits.trend$lam.site<-rnorm(nsites,inits.trend$loglam,inits.trend$sigma.site)
inits.trend$lam.year<-rnorm(nyears,(inits.trend$trend*seq(1:(nyears))),inits.trend$sigma.year)
inits.trend$lam.site
inits.trend$lam.year
parameters.trend <- c("fit", "fit.new","trend","totalN","anndet")  #
n.iter <- 250000
n.burnin <- 150000
n.chains <- 3
bird_s<-SURVEYDATA[,c(1,2,3,4,14)] %>%
arrange(Point,year,Count) %>%
rename(N=5) %>%
mutate(N=if_else(is.na(VisitID),NA,N)) %>%  ### RE-INTRODUCE THE NAs for COUNTS THAT DID NOT TAKE PLACE #####
dplyr::select(Point,year,Count,N)
BIRD.y<-array(NA, dim=c(nsites,3,nyears))
for (y in 2011:YEAR){
x<-bird_s %>%
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
yc<-match(y,c(2011:YEAR))						## translates the year (2011, 2012, etc.) into consecutive number (1,2,...) for array dimensions
BIRD.y[,,yc]<-as.matrix(x[,2:4])
}
trend.data <- list(M = BIRD.y)
trend.data
trend.data <- list(M = BIRD.y)
test <- nimbleModel(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = inits.trend,
calculate=TRUE)
inits.trend$lp
# USE TEST VALUES TO SUPPLEMENT INITS
inits.trend$lp = array(rnorm(trend.constants$nsite*trend.constants$nrep*trend.constants$nyear, c(test$mu.lp), inits.trend$sigma.p),
dim= c(trend.constants$nsite, trend.constants$nrep,trend.constants$nyear))
test$mu.lp
inits.trend$lp
test$calculate()
test$initializeInfo()
s="MTOR"
bird_s<-SURVEYDATA[,c(1,2,3,4,match(s,colnames(SURVEYDATA)))] %>%
arrange(Point,year,Count) %>%
rename(N=5) %>%
#mutate(N=if_else(is.na(VisitID),NA,N)) %>%  ### RE-INTRODUCE THE NAs for COUNTS THAT DID NOT TAKE PLACE #####
dplyr::select(Point,year,Count,N)
bird_s
### create array to be filled with data
BIRD.y<-array(NA, dim=c(nsites,3,nyears))
inits.y<-array(NA, dim=c(nsites,3,nyears))
inits.new<-array(NA, dim=c(nsites,3,nyears))
### fill in array for bird data and initial values
for (y in 2011:YEAR){
x<-bird_s %>%
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
yc<-match(y,c(2011:YEAR))						## translates the year (2011, 2012, etc.) into consecutive number (1,2,...) for array dimensions
BIRD.y[,,yc]<-as.matrix(x[,2:4])
x<-bird_s %>%
mutate(N=ifelse(is.na(N),median(bird_s$N, na.rm=T),N)) %>%   ### fill in missing values
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
inits.y[,,yc]<-as.matrix(x[,2:4])
inits.new[,,yc]<-as.matrix(x[,2:4])
}
#### GET THE MAXIMUM COUNT PER POINT PER YEAR FOR INITIAL VALUES
Nst<-as.matrix(bird_s %>%
mutate(N=ifelse(is.na(N),median(bird_s$N, na.rm=T),N)) %>%   ### fill in missing values - switch to max if there is invalid parent error
group_by(Point, year) %>%
summarise(K=max(N, na.rm=T)) %>%
spread(key=year,value=K, fill=max(bird_s$N,na.rm=T)) %>%
ungroup() %>%
arrange(Point) %>%
dplyr::select(-Point))
Nst
inits.y
BIRD.y
trend.data <- list(M = BIRD.y)
####   ADD INITIAL VALUES----     ################################
## MUST ADD Nst TO INITIAL VALUESBE FOR ALL PARAMETERS
## NIMBLE CAN HAVE CONVERGENCE PROBLEMS IF DIFFERENT INITS ARE SPECIFIED: https://groups.google.com/g/nimble-users/c/dgx9ajOniG8
inits.trend$lp = array(rnorm(trend.constants$nsite*trend.constants$nrep*trend.constants$nyear, c(test$mu.lp), inits.trend$sigma.p),
dim= c(trend.constants$nsite, trend.constants$nrep,trend.constants$nyear))
inits.trend$N = Nst
inits.trend$M = inits.y
inits.trend$M.new = inits.new
test <- nimbleModel(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = inits.trend,
calculate=TRUE)
test$calculate()
n.iter <- 2500
n.burnin <- 1500
n.chains <- 3
TRENDMOD <- nimbleMCMC(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = allchaininits.trend,
monitors = parameters.trend,
thin=4,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains,
progressBar = getNimbleOption("MCMCprogressBar"),
summary=T)
allchaininits.trend <- list(inits.trend, inits.trend, inits.trend)
### this takes 3-5 hrs for 250000 iterations and converges for most species
TRENDMOD <- nimbleMCMC(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = allchaininits.trend,
monitors = parameters.trend,
thin=4,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains,
progressBar = getNimbleOption("MCMCprogressBar"),
summary=T)
######################################################################################
#############  Load required packages       ##########################################
######################################################################################
library(tidyverse)
library(data.table)
library(dplyr)
library(dtplyr)
library(lubridate)
library(ggplot2)
# library(knitr)
# library(rmarkdown)
library(MCMCvis)
library(nimble)
library(basicMCMCplots) # for trace plots called chainsPlot
library(parallel)
library(foreach)
library(doParallel)
######################################################################################
#############  Set your working directory (path where the database is)       #########
######################################################################################
#setwd("C:\\STEFFEN\\RSPB\\Montserrat\\Analysis\\Population_status_assessment\\AnnualMonitoring\\Montserrat")
setwd("C:\\STEFFEN\\OneDrive - THE ROYAL SOCIETY FOR THE PROTECTION OF BIRDS\\STEFFEN\\RSPB\\UKOT\\Montserrat\\Analysis\\Population_status_assessment\\AnnualMonitoring\\Montserrat")
#setwd("C:\\Users\\sop\\Documents\\Steffen\\RSPB\\Montserrat\\Montserrat")
######################################################################################
#############  load the pre-prepared dataset					     #########
######################################################################################
load("data/MONTSERRAT_ANNUAL_DATA_INPUT2024.RData")
#load("S:\\ConSci\\DptShare\\SteffenOppel\\RSPB\\Montserrat\\Analysis\\Population_status_assessment\\AnnualMonitoring\\MONTSERRAT_ANNUAL_DATA_INPUT2023.RData")
fullnames<-c("Montserrat Oriole", "Forest Thrush", "Bridled Quail-Dove", "Brown Trembler",
"Antillean Crested Hummingbird","Purple-throated Carib",
"Pearly-eyed Thrasher","Green-throated Carib","Scaly-breasted Thrasher","Scaly-naped Pigeon",
"Caribbean Elaenia","Bananaquit")
### define dimensions of arrays
nsites<-length(unique(siteCov$Point))
nyears<-length(unique(countdata$year))
### removed on 8 Oct 2024 because it did not explain anything
# ### summarise rainfall from Jan to March, productivity from PREVIOUS year will affect count in current year
# rain<-fread("data/MontserratRain2005_2023.csv",fill=TRUE) %>%
#   dplyr::filter(Variable=="RainMM") %>%
#   dplyr::filter(YEAR %in% seq(2010,2024,1)) %>%
#   dplyr::select(-Variable,-Total) %>%
#   gather(key="Month", value="mm",-YEAR) %>%
#   dplyr::filter(Month %in% c('JAN','FEB','MAR')) %>%
#   group_by(YEAR) %>%
#   summarise(rain=sum(mm)) %>%
#   mutate(rain=scale(rain)[,1])
###############################################################################
############## CREATE SITE COVARIATE DATA INPUT MATRIX   ######################
###############################################################################
siteCov<-siteCov %>% arrange(Point) %>%
mutate(ridge=ifelse(Location=="Ridge",1,0)) %>%
dplyr::select(Point,treeheight,Elevation,Canopy_cover,ridge) %>%
mutate(tree=scale(treeheight)[,1], elev=scale(Elevation)[,1],canopy=scale(Canopy_cover)[,1])
###############################################################################
############## CREATE OBSERVATION COVARIATE DATA INPUT MATRIX   ###############
###############################################################################
SURVEYDATA<-countdata %>%
arrange(Point,year,Count) %>%
mutate(activity=ifelse(is.na(activity),mean(activity, na.rm=T),activity)) %>%
mutate(time=scale(time),day=scale(day),activity=scale(activity))
### only needs standardisation if measured in mm, not as 0/1 variable
#meant<-mean(SURVEYDATA$rain, na.rm = TRUE)
#sdt<-sd(SURVEYDATA$rain, na.rm = TRUE)
#SURVEYDATA$rain<-(SURVEYDATA$rain-meant)/sdt
### create array for each covariate
wind<-array(NA, dim=c(nsites,3,nyears))
rain<-array(NA, dim=c(nsites,3,nyears))
time<-array(NA, dim=c(nsites,3,nyears))
day<-array(NA, dim=c(nsites,3,nyears))
ACT<-array(NA, dim=c(nsites,3,nyears))				## REPLACED ON 2 MAY WITH RAINFALL AMOUNT
### fill in array for each covariate
for (y in 2011:YEAR){
obsC<-subset(SURVEYDATA, year==y)
y<-match(y,c(2011:YEAR))						## translates the year (2011, 2012, etc.) into consecutive number (1,2,...) for array dimensions
x<-obsC %>% dplyr::select(Point, Count, time) %>% tidyr::spread(key=Count, value=time) %>% dplyr::arrange(Point)
time[,,y]<-as.matrix(x[,2:4])
x<-obsC %>% dplyr::select(Point, Count, day) %>% tidyr::spread(key=Count, value=day) %>% dplyr::arrange(Point)
day[,,y]<-as.matrix(x[,2:4])
x<-obsC %>% dplyr::select(Point, Count, Wind) %>%
mutate(Wind=ifelse(Wind<3,0,1)) %>%
tidyr::spread(key=Count, value=Wind) %>% dplyr::arrange(Point)
wind[,,y]<-as.matrix(x[,2:4])
x<-obsC %>% dplyr::select(Point, Count, activity) %>% tidyr::spread(key=Count, value=activity) %>% dplyr::arrange(Point)
ACT[,,y]<-as.matrix(x[,2:4])
x<-obsC %>% dplyr::select(Point, Count, Rain) %>% tidyr::spread(key=Count, value=Rain) %>% dplyr::arrange(Point)
rain[,,y]<-as.matrix(x[,2:4])
}
###############################################################################
####   REPLACE ALL NA IN COVARIATES otherwise "undefined node" error    #######
###############################################################################
for (d in 1:nyears){							### replace missing dates with mean for each survey round in each year
ACT[is.na(ACT[,1,d]),1,d]<-mean(ACT[,1,d], na.rm=T)
ACT[is.na(ACT[,2,d]),2,d]<-mean(ACT[,2,d], na.rm=T)
ACT[is.na(ACT[,3,d]),3,d]<-mean(ACT[,3,d], na.rm=T)
time[is.na(time[,1,d]),1,d]<-mean(time[,1,d], na.rm=T)
time[is.na(time[,2,d]),2,d]<-mean(time[,2,d], na.rm=T)
time[is.na(time[,3,d]),3,d]<-mean(time[,3,d], na.rm=T)
day[is.na(day[,1,d]),1,d]<-mean(day[,1,d], na.rm=T)
day[is.na(day[,2,d]),2,d]<-mean(day[,2,d], na.rm=T)
day[is.na(day[,3,d]),3,d]<-mean(day[,3,d], na.rm=T)
wind[is.na(wind[,1,d]),1,d]<-0
wind[is.na(wind[,2,d]),2,d]<-0
wind[is.na(wind[,3,d]),3,d]<-0
rain[is.na(rain[,1,d]),1,d]<-0
rain[is.na(rain[,2,d]),2,d]<-0
rain[is.na(rain[,3,d]),3,d]<-0
}
seq(2011:YEAR)
######################################################################################
#############  WRITE THE NIMBLE MODEL AND SET INITS  ############################
######################################################################################
# Specify model in NIMBLE format
trend.model<-nimbleCode({
####  Priors ########
loglam~dunif(-5,5)          ##  mean abundance prior
trend~dunif(-5,5)         ##  trend prior
beta.elev~dunif(-5,5)
#beta.rain~dunif(-2,2)
beta.canopy~dunif(-5,5)
beta.treeheight~dunif(-5,5)
bwind~dunif(-5,0)   ## wind can only have negative effect on detection
brain~dunif(-5,0)   ## rain can only have negative effect on detection
btime~dunif(-5,5)
b2time~dunif(-5,5)
bday~dunif(-5,5)
bridge~dunif(-5,5)
bact~dunif(-5,5)
## SITE RANDOM EFFECT ##
for(i in 1:nsite){
lam.site[i]~dnorm(loglam,tau=tau.site)    ## site-specific random effect with hierarchical centering from Kery email 5 June 2018
}
tau.site<-1/(sigma.site*sigma.site)
sigma.site~dunif(0,2)
## YEAR RANDOM EFFECT FOR ABUNDANCE AND ANNUALLY VARYING DETECTION PROBABILITY ##
for(year in 1:nyear){
p0[year]~dunif(0.01,0.99)## detection probability
logitp0[year]<-log(p0[year]/(1-p0[year]))
#lam.year[year]~dnorm(trend*primocc[year],tau=tau.year)    ## year-specific random effect with hierarchical centering from Kery email 5 June 2018
lam.year[year]~dnorm(loglam,tau=tau.year)    ## year-specific random effect with hierarchical centering from Kery email 5 June 2018
}
tau.year<-1/(sigma.year*sigma.year)
sigma.year~dunif(0,2)
######### State and observation models ##############
for(year in 1:nyear){
for(i in 1:nsite){
log(lambda[i,year])<- lam.year[year]+
trend*primocc[year]+
beta.elev*elev[i]+
beta.treeheight*treeheight[i]+
beta.canopy*canopy[i]+
lam.site[i]
N[i,year]~dpois(lambda[i,year])
for(t in 1:nrep){
M[i,t,year]~dbin(p[i,t,year],N[i,year])
#p[i,t,year] <- exp(lp[i,t,year])/(1+exp(lp[i,t,year]))
#lp[i,t,year] ~ dnorm(mu.lp[i,t,year], tau=tau.lp)
logit(p[i,t,year])<-logitp0[year] +
btime*time[i,t,year]+
b2time * pow(time[i,t,year], 2) +
bday*day[i,t,year]+
bridge*ridge[i]+
bwind*wind[i,t,year]+
brain*rain[i,t,year]+
bact*ACT[i,t,year]
}
}
### DERIVED PARAMETER FOR EACH YEAR ###
totalN[year]<-sum(N[1:nsite,year])
anndet[year]<-mean(p[1:nsite,1:nrep,year])
}
# Computation of fit statistic (Bayesian p-value)
# Fit statistic for observed data
# Also, generate replicate data and compute fit stats for them
for(year in 1:nyear){
for(i in 1:nsite){
for(t in 1:nrep){
# Actual data
eval[i,t,year] <-N[i,year]*p[i,t,year] # Expected value
sd.resi[i,t,year]<-sqrt(eval[i,t,year]*(1-p[i,t,year])) +0.5
E[i,t,year]<-(M[i,t,year]-eval[i,t,year])/ sd.resi[i,t,year]
E2[i,t,year] <- pow(E[i,t,year],2)
# Replicate data sets
M.new[i,t,year]~dbin(p[i,t,year],N[i,year])
E.new[i,t,year]<-(M.new[i,t,year]-eval[i,t,year])/sd.resi[i,t,year]
E2.new[i,t,year] <- pow(E.new[i,t,year], 2)
}
}
}
### NIMBLE CANNOT SUM OVER 3 DIMENSIONS, hence the JAGS code does not work
# fit <- sum(E2[1:nsite,1:nrep,1:nyear])# Sum up squared residuals for actual data set
# fit.new <- sum(E2.new[1:nsite,1:nrep,1:nyear]) # Sum up for replicate data sets
## alternative solution from https://groups.google.com/g/nimble-users/c/fI8fXBpgIAE
for(year in 1:nyear){
for(i in 1:nsite){
fsum[i,year]<- sum(E2[i,1:nrep,year])
nsum[i,year] <- sum(E2.new[i,1:nrep,year])
}
}
fit <- sum(fsum[1:nsite,1:nyear])
fit.new <- sum(nsum[1:nsite,1:nyear])
}) ## end of nimble code chunk
trend.constants <- list(nsite=nsites,
nrep=3,
primocc=seq(2011:YEAR),
nyear=nyears,
elev=siteCov$elev,
treeheight=siteCov$tree,
canopy=siteCov$canopy,
rain=rain,
wind=wind,
day=day,
ridge=siteCov$ridge,
time=time,
ACT=ACT)
inits.trend <- list(#N = Nst,
trend=runif(1,-2,2),
loglam = runif(1,-2,2),
sigma.site = runif(1,0,2),
sigma.year=runif(1,0,2),
#sigma.p=runif(1,0,2),
beta.canopy=runif(1,-2,2),
#beta.rain=runif(1,-2,2),
beta.treeheight=runif(1,-2,2),
beta.elev=runif(1,-2,2),
bwind=-1,
brain=-1,
bridge=-1,
btime=-1,
b2time=-1,
bday=1,
bact=2,
p0 = runif(nyears,0.1,0.9))
inits.trend$lam.site<-rnorm(nsites,inits.trend$loglam,inits.trend$sigma.site)
inits.trend$lam.year<-rnorm(nyears,inits.trend$loglam,inits.trend$sigma.year)
# Define parameters to be monitored
parameters.trend <- c("fit", "fit.new","trend","totalN","anndet")  #
# MCMC settings
# number of posterior samples per chain is n.iter - n.burnin
n.iter <- 5000
n.burnin <- 2500
n.chains <- 3
# PRELIMINARY TEST OF NIMBLE MODEL TO IDENTIFY PROBLEMS --------------------
### fill in array for bird data and initial values
bird_s<-SURVEYDATA[,c(1,2,3,4,14)] %>%
arrange(Point,year,Count) %>%
rename(N=5) %>%
mutate(N=if_else(is.na(VisitID),NA,N)) %>%  ### RE-INTRODUCE THE NAs for COUNTS THAT DID NOT TAKE PLACE #####
dplyr::select(Point,year,Count,N)
BIRD.y<-array(NA, dim=c(nsites,3,nyears))
for (y in 2011:YEAR){
x<-bird_s %>%
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
yc<-match(y,c(2011:YEAR))						## translates the year (2011, 2012, etc.) into consecutive number (1,2,...) for array dimensions
BIRD.y[,,yc]<-as.matrix(x[,2:4])
}
trend.data <- list(M = BIRD.y)
test <- nimbleModel(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = inits.trend,
calculate=TRUE)
# USE TEST VALUES TO SUPPLEMENT INITS
inits.trend$lp = array(rnorm(trend.constants$nsite*trend.constants$nrep*trend.constants$nyear, c(test$mu.lp), inits.trend$sigma.p),
dim= c(trend.constants$nsite, trend.constants$nrep,trend.constants$nyear))
test$calculate()
test$logProb_p0
test$logProb_lam.site
test$logProb_lam.year
test$initializeInfo()
test$logProb_btime
test$logProb_bday
test$logProb_bridge
test$logProb_bact
test$logProb_M
test$logProb_p
inits.trend$p0
inits.trend$p = array(rnorm(trend.constants$nsite*trend.constants$nrep*trend.constants$nyear, c(inits.trend$p0), inits.trend$sigma.p),
dim= c(trend.constants$nsite, trend.constants$nrep,trend.constants$nyear))
inits.trend$p = array(runif(trend.constants$nsite*trend.constants$nrep*trend.constants$nyear, 0.3,0.7),
dim= c(trend.constants$nsite, trend.constants$nrep,trend.constants$nyear))
test$calculate()
test$initializeInfo()
test$logProb_p
test$logProb_M
s="MTOR"
bird_s<-SURVEYDATA[,c(1,2,3,4,match(s,colnames(SURVEYDATA)))] %>%
arrange(Point,year,Count) %>%
rename(N=5) %>%
#mutate(N=if_else(is.na(VisitID),NA,N)) %>%  ### RE-INTRODUCE THE NAs for COUNTS THAT DID NOT TAKE PLACE #####
dplyr::select(Point,year,Count,N)
###############################################################################
############## CREATE BIRD DATA INPUT MATRIX   ################################
###############################################################################
#### FILL THE MISSING DATA WITH MEAN VALUES FOR INITS
## https://groups.google.com/g/nimble-users/c/wCwacQPLR2w?pli=1
### create array to be filled with data
BIRD.y<-array(NA, dim=c(nsites,3,nyears))
inits.y<-array(NA, dim=c(nsites,3,nyears))
inits.new<-array(NA, dim=c(nsites,3,nyears))
### fill in array for bird data and initial values
for (y in 2011:YEAR){
x<-bird_s %>%
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
yc<-match(y,c(2011:YEAR))						## translates the year (2011, 2012, etc.) into consecutive number (1,2,...) for array dimensions
BIRD.y[,,yc]<-as.matrix(x[,2:4])
x<-bird_s %>%
mutate(N=ifelse(is.na(N),median(bird_s$N, na.rm=T),N)) %>%   ### fill in missing values
dplyr::filter(year==y) %>%
dplyr::select(Point, Count, N) %>%
tidyr::spread(key=Count, value=N) %>%
dplyr::arrange(Point)
inits.y[,,yc]<-as.matrix(x[,2:4])
inits.new[,,yc]<-as.matrix(x[,2:4])
}
#### GET THE MAXIMUM COUNT PER POINT PER YEAR FOR INITIAL VALUES
Nst<-as.matrix(bird_s %>%
mutate(N=ifelse(is.na(N),median(bird_s$N, na.rm=T),N)) %>%   ### fill in missing values - switch to max if there is invalid parent error
group_by(Point, year) %>%
summarise(K=max(N, na.rm=T)) %>%
spread(key=year,value=K, fill=max(bird_s$N,na.rm=T)) %>%
ungroup() %>%
arrange(Point) %>%
dplyr::select(-Point))
######################################################################################################
########## CREATE INPUT DATA FOR NIMBLE ------------------------
#######################################################################################################
#### DISTINGUISH CONSTANTS AND DATA
# Constants are values that do not change, e.g. vectors of known index values or the indices used to define for loops
# Data are values that you might want to change, basically anything that only appears on the left of a ~
trend.data <- list(M = BIRD.y)
inits.trend$N = Nst
inits.trend$M = inits.y
inits.trend$M.new = inits.new
test <- nimbleModel(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = inits.trend,
calculate=TRUE)
test$calculate()
allchaininits.trend <- list(inits.trend, inits.trend, inits.trend)
###############################################################################
####   RUN THE MODEL IN NIMBLE  --------------------###########################
###############################################################################
### this takes 3-5 hrs for 250000 iterations and converges for most species
TRENDMOD <- nimbleMCMC(code = trend.model,
constants=trend.constants,
data = trend.data,
inits = allchaininits.trend,
monitors = parameters.trend,
thin=4,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains,
progressBar = getNimbleOption("MCMCprogressBar"),
summary=T)
